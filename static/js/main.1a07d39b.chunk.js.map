{"version":3,"sources":["components/Profile.js","components/Slider.js","components/App.js","serviceWorker.js","index.js"],"names":["Profile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userInfo","editing","_this2","header","Headers","Content-Type","Authorization","fetch","method","headers","then","response","json","console","log","setState","login","catch","error","type","event","userInfoCopy","JSON","parse","stringify","target","value","_this3","react_default","a","createElement","className","FormGroup","Form","Label","Control","name","placeholder","onChange","updateValue","bind","bio","location","company","Button","variant","onClick","Component","Slider","App","currentTab","Navbar","bg","Brand","href","Nav","Link","components_Slider","components_Profile","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a07d39b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Form, FormGroup, Button} from 'react-bootstrap';\r\n\r\nclass Profile extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          userInfo : {},\r\n          editing : false,\r\n          //error : false\r\n        }\r\n      }\r\n     \r\n\r\n    componentDidMount(){\r\n        let header = new Headers({ \"Content-Type\": \"application/json\", \"Authorization\": \"token 744e27fc86a60b992865e70f434fdccd44e8d8ec\"});\r\n        fetch('https://api.github.com/users/nagambika-anguraj',{\r\n            method: 'GET',\r\n            headers: header\r\n        })\r\n        .then(response => response.json())\r\n        .then(json=>{\r\n            console.log(json)\r\n            this.setState({userInfo:json})\r\n            console.log('UserInfo State Bio =>')\r\n            console.log(this.state.userInfo.login)\r\n        })\r\n        .catch(error=> {\r\n            console.log(error)\r\n        });\r\n    }\r\n\r\n    updateValue(type, event) {\r\n        var userInfoCopy = JSON.parse(JSON.stringify(this.state.userInfo));\r\n        userInfoCopy[type] = event.target.value;\r\n        this.setState({userInfo:userInfoCopy});\r\n\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n       \r\n        <hr />\r\n\r\n        {this.state.editing ?\r\n          <FormGroup>\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control type=\"text\" \r\n             value={this.state.userInfo.name} \r\n             placeholder=\"Enter Name\"\r\n             className={this.state.error&&this.state.userInfo.name==='' ? 'red-border' : ''}\r\n             onChange={this.updateValue.bind(this,'name')}\r\n             /> \r\n           \r\n           <Form.Label>Bio</Form.Label>\r\n            <Form.Control type=\"text\" \r\n             value={this.state.userInfo.bio} \r\n             placeholder=\"Enter Bio\"\r\n             className={this.state.error&&this.state.userInfo.bio==='' ? 'red-border' : ''}\r\n             onChange={this.updateValue.bind(this,'bio')}\r\n             />\r\n             \r\n            <Form.Label>Location</Form.Label>\r\n            <Form.Control type=\"text\" \r\n             value={this.state.userInfo.location} \r\n             placeholder=\"Enter Location\"\r\n             className={this.state.error&&this.state.userInfo.location==='' ? 'red-border' : ''}\r\n             onChange={this.updateValue.bind(this,'location')}\r\n             />\r\n\r\n            <Form.Label>Company</Form.Label>\r\n            <Form.Control type=\"text\" \r\n             value={this.state.userInfo.company} \r\n             placeholder=\"Enter Company\"\r\n             className={this.state.error&&this.state.userInfo.company==='' ? 'red-border' : ''}\r\n             onChange={this.updateValue.bind(this,'company')}\r\n             />\r\n            \r\n          </FormGroup>\r\n        :\r\n          <div>\r\n            <p><strong>Name:</strong> {this.state.userInfo.name}</p>\r\n            <p><strong>Bio:</strong> {this.state.userInfo.bio}</p>\r\n            <p><strong>Location:</strong> {this.state.userInfo.location}</p>\r\n            <p><strong>Company:</strong> {this.state.userInfo.company}</p>\r\n          </div>\r\n        }<hr/>\r\n         <Button variant=\"primary\" onClick={() => this.setState({editing: !this.state.editing})}>\r\n          {this.state.editing ? 'Cancel Edit' : 'Edit'}\r\n        </Button>\r\n      </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","import React, {Component} from 'react';\r\n\r\nclass Slider extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div> \r\n                Slider goes here\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;","import React, { Component } from 'react';\nimport {Nav, Navbar} from 'react-bootstrap';\n\nimport Profile from './Profile';\nimport Slider from './Slider';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state={\n      currentTab: 'profile'\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n         <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">My Github Profile</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#slider\" onClick={() => this.setState({currentTab:'slider'})}>Slider</Nav.Link>\n            <Nav.Link href=\"#profile\" onClick={()=> this.setState({currentTab:'profile'})}>Profile</Nav.Link>\n          </Nav>\n         </Navbar>\n         <div>\n            {this.state.currentTab === 'slider' ? <Slider/> : false }\n            {this.state.currentTab === 'profile' ? <Profile/> : false} \n         </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}